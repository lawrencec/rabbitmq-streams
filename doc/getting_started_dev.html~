<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
lang="en" xml:lang="en">
<head>
<title>Getting Started with Feedshub</title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="2009-05-22 Fri"/>
<meta name="author" content="Alexander Schmolck"/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color:lightblue; font-weight:normal }
  .target { }
  .timestamp { color: grey }
  .timestamp-kwd { color: CadetBlue }
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="stylesheet.css" />
<script type="text/javascript">
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*/-->
</script>
</head><body>
<h1 class="title">Getting Started with Feedshub</h1>


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Getting started with Feedshub </a>
<ul>
<li><a href="#sec-1.1">1.1 General Overview </a></li>
<li><a href="#sec-1.2">1.2 Installation </a></li>
<li><a href="#sec-1.3">1.3 Running and debugging </a></li>
<li><a href="#sec-1.4">1.4 Developing </a>
<ul>
<li><a href="#sec-1.4.1">1.4.1 Basic Architecture </a>
<ul>
<li><a href="#sec-1.4.1.1">1.4.1.1 Main Components </a>
<ul>
<li><a href="#sec-1.4.1.1.1">1.4.1.1.1 CouchDB </a></li>
<li><a href="#sec-1.4.1.1.2">1.4.1.1.2 RabbitMQ </a>
<ul>
<li><a href="#sec-1.4.1.1.2.1">1.4.1.1.2.1 why do we need to bundle RabbitMQ? </a></li>
</ul>
</li>
<li><a href="#sec-1.4.1.1.3">1.4.1.1.3 Orchestrator </a></li>
</ul>
</li>
<li><a href="#sec-1.4.1.2">1.4.1.2 Simplified picture </a></li>
<li><a href="#sec-1.4.1.3">1.4.1.3 Full picture </a>
<ul>
<li><a href="#sec-1.4.1.3.1">1.4.1.3.1 terminal is not an "active component"; instead queue is on a server instance basis </a></li>
<li><a href="#sec-1.4.1.3.2">1.4.1.3.2 shoveler add routing key </a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-1.4.2">1.4.2 Plugins </a>
<ul>
<li>
<ul>
<li><a href="#sec-1.4.2.1">1.4.2.1 The lifecycle of a plugin </a></li>
<li><a href="#sec-1.4.2.2">1.4.2.2 Plugin configuration </a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-1.4.3">1.4.3 Writing Plugins for Sinks, Sources and </a>
<ul>
<li>
<ul>
<li><a href="#sec-1.4.3.1">1.4.3.1 <code>plugin.js</code> </a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-1.4.4">1.4.4 Writing Harnesses to add plugin support for new languages </a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">1 Getting started with Feedshub </h2>
<div id="text-1">


</div>

<div id="outline-container-1.1" class="outline-3">
<h3 id="sec-1.1">1.1 General Overview </h3>
<div id="text-1.1">


<div id="fig:flow-simplified" class="figure">
<p><img src="./flow-simplified.png"  alt="./flow-simplified.png" /></p>
<p>Flow of Information in Feedshub (simplified excerpt).</p>
</div>
<p>
***
</p>
<p>
You will be able to find the latest feedhubs news on the <a href="http://www.lshift.net/blog/tag/feedshub">LShift developer blog</a>.
</p></div>

</div>

<div id="outline-container-1.2" class="outline-3">
<h3 id="sec-1.2">1.2 Installation </h3>
<div id="text-1.2">


<ol>
<li>
Install the runtime dependencies:



<pre class="src src-sh">
make setup
</pre>




<p>
This will attempt to download and install all required dependencies. At the
minute it assumes you are using a Linux distribution with `apt-get`; but
this is restricted to a small, easily replicated section of build
dependencies (the targets ending in <code>-debs</code>). Currently a couple of packages
(e.g. CouchDB and RabbitMQ) will be locally installed from sources in the
feedshub directory, but in
</p>
</li>
<li>
Build everything:



<pre class="src src-sh">
make all
</pre>






</li>
</ol>
</div>

</div>

<div id="outline-container-1.3" class="outline-3">
<h3 id="sec-1.3">1.3 Running and debugging </h3>
<div id="text-1.3">


<p>
There are three components which need to be running: RabbitMQ (the messaging
broker), CouchDB (the database used for configuration and per-component
state), and the Orchestrator (which takes care setting up all the wiring
between components). RabbitMQ and CouchDB are together referred to as the
"core" and must be started before the Orchestrator. The following is currently
our preferred means to get everthing up and running (Note: as the project
matures this will become less fiddly and delicate, but for the moment make
sure you follow the instructions exactly):
</p>
<ol>
<li>
Start up three xterms which are configured to listen to the outputs of
each component
(<font color="#400000"><b>rabbitMQ</b></font> </font>,
<font color="#004000"><b>couchDB</b></font> </font>,
<font color="#000040"><b>orchestrator</b></font>)

<pre class="src src-sh">
make listen_all
</pre>




</li>
<li>
Stop all the components (this doesn't hurt if they're not already running),
clean the CouchDB and RabbitMQ broker, set them back up, install the test
configuration and get everthing up and running:



<pre class="src src-sh">
make stop_all_nox all cleandb start_core_nox &amp;&amp; sleep 2 <span style="color: #ff9ddd;">\</span>
&amp;&amp; ./setup-core.sh &amp;&amp; sleep 1 &amp;&amp; make start_orchestrator_nox <span style="color: #ff9ddd;">\</span>
&amp;&amp; sleep 5 &amp;&amp; python sbin/install_test_data.py <span style="color: #ff9ddd;">\</span>
&amp;&amp; make start_orchestrator_nox
</pre>




<p>
Note that if you already got a system install of couchDB or RabbitMQ etc.
you should make sure that they are either currently not running or using
different ports than the local versions that feedshub installs.
</p>
</li>
</ol>

<p>In general, <code>Makefile</code> targets that end in <code>_nox</code> (<i>No X</i>) will not
start new xterms.
</p>
<p>
All three components are normal Erlang shells (though due to
forwarding outputs over <code>nc</code>, the command history features are
lost). Thus to quit any of the components, enter <code>q()</code> and press
return in the shells. The Makefile targets take care of stopping the
components as necessary.
</p>
</div>

</div>

<div id="outline-container-1.4" class="outline-3">
<h3 id="sec-1.4">1.4 Developing </h3>
<div id="text-1.4">



</div>

<div id="outline-container-1.4.1" class="outline-4">
<h4 id="sec-1.4.1">1.4.1 Basic Architecture </h4>
<div id="text-1.4.1">


</div>

<div id="outline-container-1.4.1.1" class="outline-5">
<h5 id="sec-1.4.1.1">1.4.1.1 Main Components </h5>
<div id="text-1.4.1.1">


</div>

<div id="outline-container-1.4.1.1.1" class="outline-6">
<h6 id="sec-1.4.1.1.1">1.4.1.1.1 CouchDB </h6>
<div id="text-1.4.1.1.1">

</div>

</div>

<div id="outline-container-1.4.1.1.2" class="outline-6">
<h6 id="sec-1.4.1.1.2">1.4.1.1.2 RabbitMQ </h6>
<div id="text-1.4.1.1.2">


</div>

<div id="outline-container-1.4.1.1.2.1" class="outline-7">
<h7 id="sec-1.4.1.1.2.1">1.4.1.1.2.1 <span class="todo">TODO</span> why do we need to bundle RabbitMQ? </h7>
<div id="text-1.4.1.1.2.1">


<ul>
<li>
<a href="http://www.rabbitmq.com/admin-guide.html">RabbitMQ server admin</a>

</li>
<li>
<a href="http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">AMQP Overview</a>
</li>
<li>
<a href="http://www.rabbitmq.com/api-guide.html">RabbitMQ Java Client API guide</a>
</li>
<li>
<a href="/home/alexander/feedshub/harness/java/lib/rabbitmq-java-client-1.5.4/test/src/com/rabbitmq/examples/SimpleConsumer.java">SimpleConsumer.java</a> and <a href="/home/alexander/feedshub/harness/java/lib/rabbitmq-java-client-1.5.4/test/src/com/rabbitmq/examples/SimpleProducer.java">SimpleProducer.java</a>
</li>
</ul>
</div>
</div>

</div>

<div id="outline-container-1.4.1.1.3" class="outline-6">
<h6 id="sec-1.4.1.1.3">1.4.1.1.3 Orchestrator </h6>
<div id="text-1.4.1.1.3">

</div>
</div>

</div>

<div id="outline-container-1.4.1.2" class="outline-5">
<h5 id="sec-1.4.1.2">1.4.1.2 Simplified picture </h5>
<div id="text-1.4.1.2">

</div>

</div>

<div id="outline-container-1.4.1.3" class="outline-5">
<h5 id="sec-1.4.1.3">1.4.1.3 Full picture </h5>
<div id="text-1.4.1.3">


</div>

<div id="outline-container-1.4.1.3.1" class="outline-6">
<h6 id="sec-1.4.1.3.1">1.4.1.3.1 terminal is not an "active component"; instead queue is on a server instance basis </h6>
<div id="text-1.4.1.3.1">

</div>

</div>

<div id="outline-container-1.4.1.3.2" class="outline-6">
<h6 id="sec-1.4.1.3.2">1.4.1.3.2 shoveler add routing key </h6>
<div id="text-1.4.1.3.2">


</div>
</div>
</div>

</div>

<div id="outline-container-1.4.2" class="outline-4">
<h4 id="sec-1.4.2">1.4.2 Plugins </h4>
<div id="text-1.4.2">


</div>

<div id="outline-container-1.4.2.1" class="outline-6">
<h6 id="sec-1.4.2.1">1.4.2.1 The lifecycle of a plugin </h6>
<div id="text-1.4.2.1">

<ol>
<li>
The plugin configuration is read from stdin in json format.
</li>
<li>
The plugin prints its PID to stdout (so that runaway plugins can be
killed easily by the orchestrator).
</li>
<li>
The plugin initializes itself.
</li>
<li>
A worker thread or process is spawned by the main thread of the
plugin (this, or its children, will do the actual work).
</li>
<li>
The main thread blocks on reading stdout. As soon as stdout is closed
by the orchestrator the plugin kills itself and all spawned threads
or processes (this is the shutdown protocol; misbehaving plugins that
fail to shutdown if requested will be killed by sending a TERM signal
(verify) to the PID obtained in step 2).
</li>
</ol>
</div>

</div>

<div id="outline-container-1.4.2.2" class="outline-6">
<h6 id="sec-1.4.2.2">1.4.2.2 Plugin configuration </h6>
<div id="text-1.4.2.2">

<pre class="example">
"configuration_specification": [
      {"label": "Regexp",
       "type": "string",
       "name": "regexp"
      },
</pre>
*********

</div>
</div>

</div>

<div id="outline-container-1.4.3" class="outline-4">
<h4 id="sec-1.4.3">1.4.3 Writing Plugins for Sinks, Sources and </h4>
<div id="text-1.4.3">

<p>*******
</p>
</div>

<div id="outline-container-1.4.3.1" class="outline-6">
<h6 id="sec-1.4.3.1">1.4.3.1 <code>plugin.js</code> </h6>
<div id="text-1.4.3.1">




<pre class="src src-javascript">
<span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">applies to both pipeline components and servers
</span>{ <span style="color: #ff9ddd;">"name"</span>: <span style="color: #ff9ddd;">"Some Plugin description"</span>,
  <span style="color: #ff9ddd;">"author"</span>: { <span style="color: #ff9ddd;">"name"</span>:  <span style="color: #ff9ddd;">"John Doe"</span>,
              <span style="color: #ff9ddd;">"email"</span>: <span style="color: #ff9ddd;">"jondoe@example.tld"</span> },
  <span style="color: #ff9ddd;">"type"</span>: <span style="color: #ff9ddd;">"plugin-specification"</span>,
  <span style="color: #ff9ddd;">"harness"</span>: <span style="color: #ff9ddd;">"java"</span>, <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">or "python" or "ruby"
</span>  <span style="color: #ff9ddd;">"subtype"</span>: <span style="color: #ff9ddd;">"pipeline_component"</span>, <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">or  "server"
</span>  <span style="color: #ff9ddd;">"global_configuration_specification"</span>: [], <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">experimental, might disappear
</span>  <span style="color: #a3a3ff;">/* </span><span style="color: #a3a3ff;">the configuration that must be provided per plugin instance */</span>
  <span style="color: #ff9ddd;">"configuration_specification"</span>:  [ { <span style="color: #ff9ddd;">"name"</span>: <span style="color: #ff9ddd;">"port"</span>, <span style="color: #ff9ddd;">"label"</span>: <span style="color: #ff9ddd;">"Port"</span>, <span style="color: #ff9ddd;">"type"</span>: <span style="color: #ff9ddd;">"Nat"</span> }
                                    <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">...
</span>                                  ],
  <span style="color: #a3a3ff;">/* </span><span style="color: #a3a3ff;">configuration per terminal (terminal ONLY) */</span>
  <span style="color: #ff9ddd;">"destination_specification"</span>: [ { <span style="color: #ff9ddd;">"name"</span>: <span style="color: #ff9ddd;">"title"</span>, <span style="color: #ff9ddd;">"label"</span>: <span style="color: #ff9ddd;">"Title for RSS"</span>, <span style="color: #ff9ddd;">"type"</span>: <span style="color: #ff9ddd;">"String"</span> }
                                 <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">...
</span>                               ],
  <span style="color: #a3a3ff;">/* </span><span style="color: #a3a3ff;">configuration per terminal (terminal ONLY) */</span>
  <span style="color: #ff9ddd;">"source_specification"</span>: [ { <span style="color: #ff9ddd;">"name"</span>: <span style="color: #ff9ddd;">"url"</span>, <span style="color: #ff9ddd;">"label"</span>: <span style="color: #ff9ddd;">"URL of RSS"</span>, <span style="color: #ff9ddd;">"type"</span>: <span style="color: #ff9ddd;">"URL"</span> }
                            <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">...
</span>                          ],

  <span style="color: #a3a3ff;">/* </span><span style="color: #a3a3ff;">configuration per feed component (feed_component ONLY) */</span>
  <span style="color: #ff9ddd;">"inputs_specification"</span>: [ { <span style="color: #ff9ddd;">"name"</span>: <span style="color: #ff9ddd;">"input"</span> }
                            <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">...
</span>                          ],
  <span style="color: #a3a3ff;">/* </span><span style="color: #a3a3ff;">configuration per feed component (feed_component ONLY) */</span>
  <span style="color: #ff9ddd;">"outputs_specification"</span>: [ { <span style="color: #ff9ddd;">"name"</span>: <span style="color: #ff9ddd;">"output"</span> }
                           <span style="color: #a3a3ff;">//</span><span style="color: #a3a3ff;">...
</span>                           ],
   <span style="color: #a3a3ff;">/* </span><span style="color: #a3a3ff;">AWMS: again what's the point of this? Shouldn't this just be a bool? */</span>
  <span style="color: #ff9ddd;">"database_specification"</span>: <span style="font-weight: bold;">null</span> <span style="color: #a3a3ff;">// </span><span style="color: #a3a3ff;">or {}  initial values for the per instance db
</span>}
</pre>





</div>
</div>

</div>

<div id="outline-container-1.4.4" class="outline-4">
<h4 id="sec-1.4.4">1.4.4 Writing Harnesses to add plugin support for new languages </h4>
<div id="text-1.4.4">

</div>
</div>
</div>
</div>
<div id="postamble"><p class="author"> Author: Alexander Schmolck
<a href="mailto:alexander@lshift.net">&lt;alexander@lshift.net&gt;</a>
</p>
<p class="date"> Date: 2009-05-22 Fri</p>
<p>HTML generated by org-mode 6.21b in emacs 23</p>
</div></body>
</html>
